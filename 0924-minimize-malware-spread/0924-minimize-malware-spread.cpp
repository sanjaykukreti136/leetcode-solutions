class Solution {
public:
    vector<int>par,size;
    // int par[301] = {-1};
    // int size[301] = {1};
    int find(int x){
        if(par[x]==x) return x;
        return par[x] = find(par[x]);
    }
    
    void add(int a , int b){
        int para = find(a);
        int parb = find(b);
        if(para==parb) return ;
        if(size[para] > size[parb]){
            par[b] = a;
            size[para]+=size[parb];
        }else{
            par[a]= b;
            size[parb]+=size[para];
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
            int n = graph.size();
            par.resize(n , -1);
            size.resize(n,1);
            for(int i=0;i<n;i++){
                par[i] = i;
            }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i!=j && graph[i][j] == 1){
                    add(i , j);
                }
            }
        }
        vector<int>nodes(n, 0);
        for(auto i : initial){
            nodes[find(i)]++;
        }
        int ans = -1;
        int maxsize= -1;
        for(auto i : initial){
            if(nodes[find(i)]==1){
                if(size[find(i)] > maxsize){
                    cout<<i<<".\n";
                    maxsize = size[find(i)];
                    ans = i;
                }else if(size[find(i)]==maxsize){
                    ans = min(ans , i);
                    cout<<"..\n";
                }   
            }
        }
        
        if(ans  == -1){
            cout<<"x\n";
            ans = INT_MAX;
            for(auto i : initial){
                ans = min(ans , i);
            }
            return ans;
        }
        
        return ans;
    }
};