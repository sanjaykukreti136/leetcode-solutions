class Solution {
public:
    
    int find_par(int a , vector<int>&v){
        if(a==v[a]) return a;
        return v[a] = find_par(v[a] , v);
    }
    void do_union(int a, int b, vector<int>&par, vector<int>&size){
        if(size[a] > size[b]){
            par[b] = a;
            size[a]+=size[b];
        }else{
            par[a] = b;
            size[b]+=size[a];
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<int>par(n);
        vector<int>size(n);
        for(int i=0;i<n;i++){
            par[i]= i;
            size[i] =1;
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1 && i!=j){
                    int a = find_par(i,par);
                    int b = find_par(j,par);
                    if(a!=b){
                        do_union(a,b, par , size);
                    }
                }
            }
        }
        vector<int>nodes(n , 0);
        // sort(initial.begin(),initial.end());
        // int nodes[n] = {0};
        for(auto i : initial){
            nodes[find_par(i,par)]++;
        }
        int max_size = -1;
        int ans = -1;
        for(auto i : initial){
            if(nodes[find_par(i,par)]==1){
                if(size[find_par(i,par)] > max_size){
                    max_size = size[find_par(i,par)];
                    ans = i;
                }else if(size[find_par(i,par)]==max_size){
                    ans = min(ans , i);
                    
                }
            }
        }
        if(ans==-1){
             ans = INT_MAX;
            for(auto i : initial){
                ans = min(i , ans);
            }
            return ans;
        }
        return ans;
        
        
    }
};